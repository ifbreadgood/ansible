global
  daemon
  maxconn 256
  log stdout format raw daemon

defaults
  mode http
  option log-health-checks
  option httplog
  timeout connect 5000ms
  timeout client 50000ms
  timeout server 50000ms
  log global

#frontend http
  #bind *:80
  #use_backend minio-api if { req.hdr(Host) -i -m dom minio-api.trial.studio }
  #use_backend argo-cd if { req.hdr(Host) -i -m dom localhost }

# backend argo-cd
#   server s1 argo-cd.trial.studio

frontend https
  bind *:443 ssl crt /certs/trial.studio.pem
  use_backend adguard if { req.hdr(Host) -i -m dom adguard.trial.studio }
#  use_backend minio if { req.hdr(Host) -i -m dom minio.trial.studio }
#  use_backend minio-api if { req.hdr(Host) -i -m dom minio-api.trial.studio }
#  use_backend gitea if { req.hdr(Host) -i -m dom gitea.trial.studio }
  use_backend vault if { req.hdr(Host) -i -m dom vault.trial.studio }
  use_backend keycloak if { req.hdr(Host) -i -m dom keycloak.trial.studio }
  use_backend victoria-metrics if { req.hdr(Host) -i -m dom victoria-metrics.trial.studio }
  use_backend victoria-logs if { req.hdr(Host) -i -m dom victoria-logs.trial.studio }
  use_backend grafana if { req.hdr(Host) -i -m dom grafana.trial.studio }

# frontend ssh
#   bind *:22
#   #bind *:22 ssl crt /certs
#   mode tcp
#   log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq dst:%[var(sess.dst)] "
#   tcp-request content set-var(sess.dst) ssl_fc_sni
#   use_backend gitea-ssh

backend adguard
  option httpchk

  http-check connect
  http-check send meth GET uri /
  http-check expect status 302

  server s1 adguard:80 check inter 10s fall 3 rise 3 observe layer7 error-limit 50 on-error mark-down

#backend minio
#  option httpchk

  # `check` sets active healthcheck
  # default interval 2s, fall (# of failure to remove from sending) 3, rise (back to healthy) 3
  # `observe` sets passive healthcheck, can be layer[4|7]
  # for layer 7, by default http status 100-499, 501, and 505 are successful
  # consecutive errors reaching `error-limit` will execute `on-error` rule
  # check alternative port 9000 instead
  # server s1 minio:9001 check inter 10s fall 3 rise 3 observe layer7 error-limit 50 on-error mark-down

#backend minio-api
#  option httpchk
#  server s1 minio:9000 check inter 10s fall 3 rise 3 observe layer7 error-limit 50 on-error mark-down

# backend gitea
#   option httpchk
#
#   http-check connect
#   http-check send meth GET uri /api/healthz
#   http-check expect status 200
#
#   server s1 gitea:3000 check inter 10s fall 3 rise 3 observe layer7 error-limit 50 on-error mark-down
#
# backend gitea-ssh
#   mode tcp
#   server s1 gitea:22 check

backend keycloak
  option httpchk

  http-check connect port 9000
  http-check send meth GET uri /health/ready/
  http-check expect status 200
  default-server inter 10s fall 3 rise 3

  server s1 keycloak:8443 ssl check-ssl verify none observe layer7 error-limit 50 on-error mark-down

backend vault
  option httpchk

  http-check connect
  http-check send meth GET uri /v1/sys/health
  http-check expect status 200

  server s1 vault:8200 ssl check-ssl verify none inter 10s fall 3 rise 3 observe layer7 error-limit 50 on-error mark-down

backend victoria-metrics
  option httpchk

  http-check connect
  http-check send meth GET uri /-/healthy
  http-check expect status 200

  server s1 victoria-metrics:8428 check inter 10s fall 3 rise 3 observe layer7 error-limit 50 on-error mark-down

backend victoria-logs
  option httpchk

  http-check connect
  http-check send meth GET uri /-/healthy
  http-check expect status 200

  server s1 victoria-logs:9428 check inter 10s fall 3 rise 3 observe layer7 error-limit 50 on-error mark-down

backend grafana
  option httpchk

  http-check connect
  http-check send meth GET uri /healthz
  http-check expect status 200

  server s1 grafana:3000 check inter 10s fall 3 rise 3 observe layer7 error-limit 50 on-error mark-down
